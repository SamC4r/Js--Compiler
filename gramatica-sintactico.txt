Terminales = { 
  var function 
  id
  ; ,
  if else
  ( { })
  int boolean string void
  > - % !
  return 
  input
  output
  = --
  constanteEntera
  cadena
}

NoTerminales = {
Z
B
T
E
O
M
P
L
Q
I
J
C
S
D
X
F
H
A
K

}

Axioma = Z

Producciones = {

Z -> B Z 
Z -> F Z
Z -> lambda

B -> var T id ; 
B -> if ( E ) I
B -> S

T -> int 
T -> boolean
T -> string

E -> P E > O 
E -> O 

O -> P - O
O -> M

M -> P % M
M -> P

P -> ! P 
P -> id 
P -> id ( L ) 
P -> ( E ) 
P -> constanteEntera 
P -> cadena 
P -> -- id

L -> E Q 
L -> lambda

Q -> , E Q 
Q -> lambda

I -> S
I -> { C } J

J -> else { C }
J -> lambda

C -> B C 
C -> lambda

S ->  id = E ; 
S -> id ( L ) ; 
S -> output E ; 
S -> input D ; 
S -> return X ;

D -> id
D -> ( id )

X -> E 
X -> lambda

F -> function H id ( A ) { C }

H -> T 
H -> void 
A -> T id K 
A -> void 

K ->  , T id K 
K -> lambda

}

